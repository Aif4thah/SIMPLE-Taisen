@page "/simple-demo"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using TAISEN.Classes;

<PageTitle>SIMPLE</PageTitle>
    <h1>Démonstration</h1>
    <p><i>les sections suivantes sont en cours de développement. Elles présentent le détail de la méthode et les fonctionnalités qui lui seront prochainement associées</i></p>


@if (GetEtapes == null)
{
        <p><em>Chargement...</em></p>
}
else
{
    @foreach( SEtape E in GetEtapes)
    {
        <h2>@E.Etape</h2>
        <span class="oi oi-briefcase" aria-hidden="true"></span>       
            <p>@E.Objectif</p>
        
        @foreach( Atelier A in E.Ateliers)
        {
            <div class="bgDiv">
                <h3>@A.Nom</h3>
                <span class="oi oi-clipboard" aria-hidden="true"></span><br />
                @if(@A.Prerequis != null){<a>Prérequis : @A.Prerequis</a> <br/>}
                <a>Poids : @A.Poids</a>

                <fieldset>
                    <legend>Processus:</legend>
                    @foreach(Processus P in A.Processus){
                        <input class="CheckBox" type="checkbox" @bind=@P.Fin name=@P.Nom value=@P.Nom/><br/>   
                        <label for=@P.Nom>@P.Nom</label><br/>
                }
                </fieldset>

                <fieldset>
                    <legend>Livrables:</legend>
                @foreach(Livrables L in A.Livrables){
                    <p>@L.Nom</p>
                    <form>
                        <textarea @bind=@L.CR></textarea>
                    </form>
                }
                <button class="button" @onclick="Save">Sauvegarder l'atelier</button>
                </fieldset>
                
            </div>
        }
    }

}
<h3>Licence</h3>
<span class="oi oi-badge" aria-hidden="true"></span>
    <div class="bgDiv">
        <a>GPL-3.0 license</a>
    </div>

@code{

    private SEtape[]? GetEtapes;
    private int TotalPoids = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GetEtapes = await localStorage.GetItemAsync<SEtape[]>("SIMPLE");
            @foreach(SEtape E in GetEtapes) // exception ici
               @foreach(Atelier A in E.Ateliers) // exception ici
                   TotalPoids += A.Poids;
        }
        catch
        {
            GetEtapes = await Http.GetFromJsonAsync<SEtape[]>("/Data/SIMPLE.json");
        }

    }

    public async Task Save()
    {
        await localStorage.SetItemAsync("SIMPLE", GetEtapes);
    }

    public async Task Load()
    {
        GetEtapes = await localStorage.GetItemAsync<SEtape[]>("SIMPLE");
    }

}
