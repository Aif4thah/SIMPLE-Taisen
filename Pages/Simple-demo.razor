@page "/simple-demo/{IEtape:int?}"
@layout SimpleLayout
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using TAISEN.Classes;

<PageTitle>SIMPLE</PageTitle>

@if (GetEtapes == null)
{
    <p><em>Chargement...</em></p>
    <button class="button" @onclick=Clear>Vider le cache</button>
}
else
{
    E = GetEtapes?[IEtape % GetEtapes.Count()];
    <h1>@E?.Etape</h1>
    <span class="oi oi-briefcase" aria-hidden="true"></span>
    <p class="sh1">@E?.Objectif</p>


    @foreach (Atelier A in E.Ateliers)
    {
        <div class="bgDiv">
            <h3><b>@A.Nom</b><br>@A.Description</h3>
            <span class="oi oi-clipboard" aria-hidden="true"></span><br>
            <div>
                <ul>
                    <li><b>Poids :</b> @A.Poids</li>
                    <li><b>Nombre de Processus :</b> @A.Processus.Count()</li>
                    @if (@A.Prerequis != null)
                    {
                        <li><b>Prérequis :</b> @A.Prerequis</li>
                    }

                    @if (@A.Interlocuteurs != null)
                    {
                        string Tous = string.Empty;
                        bool first = true;
                        @foreach (string I in A.Interlocuteurs)
                        {
                            @if (first)
                            {
                                Tous += I;
                                first = false;
                            }
                            else
                            {
                                Tous += ", " + I;
                            }
                        }
                        <li><b>Interlocuteurs :</b> @Tous</li>
                    }
                </ul>
            </div>


            <fieldset>
                @foreach (Processus P in A.Processus)
                {
                    <legend>@P.Nom</legend>

                    @if (@P.Referentiel != null)
                    {
                        <div>
                            <ul>
                                <li><b>Referentiel : </b><a href="@P.Referentiel.Uri">@P.Referentiel.Nom</a></li>
                            </ul>
                        </div>
                        <br>
                    }

                    @if (@P.Outils != null)
                    {
                        @foreach (Outil tool in @P.Outils)
                        {
                            <div>
                                <ul>
                                    <li><b>Outillage : </b><a href="@tool.Uri">@tool.Nom</a></li>
                                </ul>
                            </div>
                            <br>
                        }

                    }



                    @foreach (Livrable L in P.Livrables)
                    {
                        <a>@L.Nom :</a>
                        @if (@L.CR?.Texte != null)
                        {
                            <form>
                                <textarea class="TextBig" @bind=@L.CR.Texte></textarea>
                            </form>
                        }


                        if (@L.CR?.Els?.Count > 0)
                        {
                            @if (@L.CR.Els.LastOrDefault()?.Texte != DefaultStr)
                            {
                                L.CR.Els.Add(new El() { Texte = DefaultStr });
                            }

                            @L.CR.Els.RemoveAll(El => El.Texte == String.Empty);

                            <form>
                                <EditForm Model=@L.CR.Els>
                                    @foreach (El el in L.CR.Els)
                                    {
                                        <InputText @bind-Value=@el.Texte /><br>
                                    }
                                </EditForm>
                                <button class="button" @onclick=Save>Sauvegarder</button>
                            </form>

                        }


                        if (@L.CR?.FonctionSensibles?.Count > 0)
                        {
                            @if (@L.CR.FonctionSensibles.LastOrDefault()?.Nom != DefaultStr)
                            {
                                L.CR.FonctionSensibles.Add(new FonctionSensible()
                                {
                                    Nom = DefaultStr,
                                    Spoofing = true,
                                    Tampering = true,
                                    Repudiation = true,
                                    InformationDisclosure = true,
                                    DenialOfService = true,
                                    ElevationOfPrivilege = true
                                });
                            }

                            @L.CR.FonctionSensibles.RemoveAll(fs => fs.Nom == String.Empty)

                            <form>
                                <EditForm Model=@L.CR.FonctionSensibles>
                                    @foreach (FonctionSensible fs in L.CR.FonctionSensibles)
                                    {
                                        <InputText @bind-Value=@fs.Nom />
                                        <label>S:
                                            <InputCheckbox @bind-Value=@fs.Spoofing />
                                        </label>
                                        <label>T:
                                            <InputCheckbox @bind-Value=@fs.Tampering />
                                        </label>
                                        <label>R:
                                            <InputCheckbox @bind-Value=@fs.Repudiation />
                                        </label>
                                        <label>I:
                                            <InputCheckbox @bind-Value=@fs.InformationDisclosure />
                                        </label>
                                        <label>D:
                                            <InputCheckbox @bind-Value=@fs.DenialOfService />
                                        </label>
                                        <label>E:
                                            <InputCheckbox @bind-Value=@fs.ElevationOfPrivilege />
                                        </label>
                                        <br>
                                    }
                                </EditForm>
                                <button class="button" @onclick=Save>Sauvegarder</button>
                            </form>
                        }


                        if (@L.CR?.MesureSecurites?.Count > 0)
                        {
                            @if (@L.CR.MesureSecurites.LastOrDefault()?.Nom != DefaultStr)
                            {
                                L.CR.MesureSecurites.Add(new MesureSecurite()
                                {
                                    Nom = DefaultStr,
                                    Description = DefaultStr,
                                    SpoofingPrevention = false,
                                    TamperingPrevention = false,
                                    RepudiationPrevention = false,
                                    InformationDisclosurePrevention = false,
                                    DenialOfServicePrevention = false,
                                    ElevationOfPrivilegePrevention = false,
                                });
                            }

                            @L.CR.MesureSecurites.RemoveAll( ms => ms.Nom == String.Empty);

                            <form>
                                <EditForm Model=@L.CR.MesureSecurites>
                                    @foreach (MesureSecurite ms in @L.CR.MesureSecurites)
                                    {
                                        <InputSelect @bind-Value=@ms.FonctionCible>
                                            <option value="">Lier à une Fonctions sensible</option>
                                            @foreach (FonctionSensible fs in CollectedFs)
                                            {
                        <option value=@fs.Nom>@fs.Nom</option>
                                            }
                </InputSelect>

                                        <InputText @bind-Value=@ms.Nom />
                                        <InputText @bind-Value=@ms.Description />
                                        <label>S:
                                            <InputCheckbox @bind-Value=@ms.SpoofingPrevention />
                                        </label>
                                        <label>T:
                                            <InputCheckbox @bind-Value=@ms.TamperingPrevention />
                                        </label>
                                        <label>R:
                                            <InputCheckbox @bind-Value=@ms.RepudiationPrevention />
                                        </label>
                                        <label>I:
                                            <InputCheckbox @bind-Value=@ms.InformationDisclosurePrevention />
                                        </label>
                                        <label>D:
                                            <InputCheckbox @bind-Value=@ms.DenialOfServicePrevention />
                                        </label>
                                        <label>E:
                                            <InputCheckbox @bind-Value=@ms.ElevationOfPrivilegePrevention />
                                        </label>
                                        <br>
                                    }
                                </EditForm>
                                <button class="button" @onclick=Save>Sauvegarder</button>
                            </form>
                        }

                        if (@L.CR?.RecetteSecus?.Count > 0)
                        {
                            @if (@L.CR.RecetteSecus.LastOrDefault()?.MesureTestee != DefaultStr)
                            {
                                L.CR.RecetteSecus.Add(new RecetteSecu()
                                {
                                    MesureTestee = DefaultStr,
                                    Efficacite = 0
                                });
                            }

                            @L.CR.RecetteSecus.RemoveAll(rs => rs.MesureTestee == string.Empty);

                            <form>
                                <EditForm Model=@L.CR.RecetteSecus>
                                    <DataAnnotationsValidator />
                                    @foreach (RecetteSecu rs in @L.CR.RecetteSecus)
                                    {
                                        <InputSelect @bind-Value=@rs.MesureTestee>
                                            <option value="">Lier à une Mesure de sécurité</option>
                                            @foreach (MesureSecurite ms in CollectedMs)
                                            {
                        <option value=@ms.Nom>@ms.Nom</option>
                                            }
                </InputSelect>

                                        <InputNumber id="name" @bind-Value=@rs.Efficacite />
                                        <br>
                                    }
                                </EditForm>
                                <button class="button" @onclick=Save>Sauvegarder</button>
                            </form>
                        }
                    }

                    <ul>
                        <li>
                            <input class="CheckBox" type="checkbox" @bind=@P.Fin name=@P.Nom value=@P.Nom />
                            <label for=@P.Nom>Réalisé</label>
                        </li>
                    </ul>
                    <br>
                }
            </fieldset>

        </div>
    }
    <form>
        @if ((IEtape % GetEtapes?.Count()) != 0)
        {
            <a href="/simple-demo/@((IEtape-1))"><input type="button" class="button" value="< Etape précédente"></a>
        }
        @if ((IEtape % GetEtapes?.Count()) != GetEtapes?.Count() - 1)
        {
            <a href="/simple-demo/@((IEtape+1))"><input type="button" class="button" value="Etape Suivante >"></a>
        }
    </form>

}


@code {
    [Parameter]
    public int IEtape { get; set; } = 0;
    public string DefaultStr = "Nouvel Élément";
    private List<FonctionSensible> CollectedFs = new List<FonctionSensible>();
    private List<MesureSecurite> CollectedMs = new List<MesureSecurite>();
    private SEtape[]? GetEtapes;
    private SEtape? E;


    protected override async Task OnInitializedAsync()
    {

        try
        {
            GetEtapes = await localStorage.GetItemAsync<SEtape[]>("SIMPLE");
            CheckAndGet();

        }
        catch
        {
            await localStorage.ClearAsync();
            GetEtapes = await Http.GetFromJsonAsync<SEtape[]>("/Data/SIMPLE.json");
            CheckAndGet();
        }
    }

    public async Task Save()
    {
        await localStorage.SetItemAsync("SIMPLE", GetEtapes);
    }

    public void CheckAndGet()
    {
        @foreach (SEtape E in GetEtapes)
        {
            @foreach (Atelier A in E.Ateliers)
            {
                A.Nom.GetType();
                A.Poids.GetType();
                @foreach (Processus P in A.Processus)
                {
                    P.Nom.GetType();
                    @foreach (Livrable L in P.Livrables)
                    {
                        L.Nom.GetType();
                        @if (A.Nom == "I2" && L.CR?.FonctionSensibles?.Count > 0)
                        {
                            foreach( FonctionSensible fs in L.CR.FonctionSensibles){
                                @if( fs.Nom != DefaultStr){
                                    CollectedFs?.Add(fs);
                                }
                            }
                        }
                        else if (A.Nom == "P2" && L.CR?.MesureSecurites?.Count > 0)
                        {
                            foreach(MesureSecurite ms in L.CR.MesureSecurites ){
                                @if(ms.Nom != DefaultStr){
                                    CollectedMs?.Add(ms);
                                }                                
                            }
                        }
                    }
                }
            }
        }
    }

    public async Task Clear()
    {
        await localStorage.ClearAsync();
    }

}
